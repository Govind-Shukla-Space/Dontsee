# weather_producer.py
import json
import time
from kafka import KafkaProducer

TOPIC = "weather.readings"
BOOTSTRAP_SERVERS = ["localhost:9092"]

def create_producer():
    return KafkaProducer(
        bootstrap_servers=BOOTSTRAP_SERVERS,
        value_serializer=lambda v: json.dumps(v).encode("utf-8"),
    )

if __name__ == "__main__":
    with open("data.json") as f:
        data = json.load(f)

    producer = create_producer()
    print("ðŸš€ Sending raw weather readings to Kafka...")

    for record in data:
        producer.send(TOPIC, record)
        print("âœ… Sent:", record)
        time.sleep(1)

    producer.flush()

consumer
# weather_alert_consumer.py
import json
from kafka import KafkaConsumer

TOPIC = "weather.alerts"
BOOTSTRAP_SERVERS = ["localhost:9092"]

def create_consumer():
    return KafkaConsumer(
        TOPIC,
        bootstrap_servers=BOOTSTRAP_SERVERS,
        auto_offset_reset="earliest",
        enable_auto_commit=True,
        group_id="alert-clean-consumer",
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
    )

if __name__ == "__main__":
    consumer = create_consumer()
    print("ðŸ“¡ Listening for emergency alerts...")
    for msg in consumer:
        alert = msg.value
        print("\nðŸš¨ EMERGENCY ALERT ðŸš¨")
        print(f"Station: {alert.get('station_id', 'UNKNOWN')}")
        print(f"Location: {alert.get('location', 'UNKNOWN')}")

        # Defensive: check if "alerts" key exists
        if "alerts" in alert:
            print(f"Alerts: {', '.join(alert['alerts'])}")
        else:
            print("Alerts: NONE (invalid or malformed message)")

        print(f"Timestamp: {alert.get('reading_timestamp', 'N/A')}")
