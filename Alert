# weather_alert_producer_clean.py
import json
from kafka import KafkaConsumer, KafkaProducer
from weather_consumer_clean import process_record

READINGS_TOPIC = "weather.readings"
ALERTS_TOPIC = "weather.alerts"
BOOTSTRAP_SERVERS = ["localhost:9092"]

def create_consumer():
    return KafkaConsumer(
        READINGS_TOPIC,
        bootstrap_servers=BOOTSTRAP_SERVERS,
        auto_offset_reset="earliest",
        enable_auto_commit=True,
        group_id="alert-clean-producer",
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
    )

def create_producer():
    return KafkaProducer(
        bootstrap_servers=BOOTSTRAP_SERVERS,
        value_serializer=lambda v: json.dumps(v).encode("utf-8"),
    )

def check_alerts(record):
    alerts = []
    if record["wind_speed_kmh"] > 70:
        alerts.append("High Wind Alert")
    if record["precip_mm"] > 30:
        alerts.append("Flood Warning")
    if record["wind_speed_kmh"] > 50 and record["precip_mm"] > 20:
        alerts.append("Storm Warning")
    if record["temperature_c"] < -20 or record["temperature_c"] > 40:
        alerts.append("Extreme Temperature")
    return alerts

if __name__ == "__main__":
    consumer = create_consumer()
    producer = create_producer()
    print("âš¡ Processing cleaned weather data & generating alerts...")

    for msg in consumer:
        cleaned = process_record(msg.value)
        alerts = check_alerts(cleaned)
        if alerts:
            alert_msg = {
                "station_id": cleaned["station_id"],
                "location": cleaned["location"],
                "alerts": alerts,
                "reading_timestamp": cleaned["reading_timestamp"],
            }
            producer.send(ALERTS_TOPIC, alert_msg)
            print("ðŸš¨ ALERT Published:", alert_msg)


consumer

# weather_alert_consumer.py
import json
from kafka import KafkaConsumer

TOPIC = "weather.alerts"
BOOTSTRAP_SERVERS = ["localhost:9092"]

def create_consumer():
    return KafkaConsumer(
        TOPIC,
        bootstrap_servers=BOOTSTRAP_SERVERS,
        auto_offset_reset="earliest",
        enable_auto_commit=True,
        group_id="alert-clean-consumer",
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
    )

if __name__ == "__main__":
    consumer = create_consumer()
    print("ðŸ“¡ Listening for emergency alerts...")
    for msg in consumer:
        alert = msg.value
        print("\nðŸš¨ EMERGENCY ALERT ðŸš¨")
        print(f"Station: {alert['station_id']}")
        print(f"Location: {alert['location']}")
        print(f"Alerts: {', '.join(alert['alerts'])}")
        print(f"Timestamp: {alert['reading_timestamp']}")
