"""
Weather Alert Producer - Milestone 2
Consumes raw weather readings from Kafka, detects hazards, and publishes alerts to weather.alerts
"""

import json
from kafka import KafkaConsumer, KafkaProducer

READINGS_TOPIC = "weather.readings"
ALERTS_TOPIC = "weather.alerts"
BOOTSTRAP_SERVERS = ["localhost:9092"]

def create_consumer():
    return KafkaConsumer(
        READINGS_TOPIC,
        bootstrap_servers=BOOTSTRAP_SERVERS,
        auto_offset_reset="earliest",
        enable_auto_commit=True,
        group_id="alert-producer-group",
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
    )

def create_producer():
    return KafkaProducer(
        bootstrap_servers=BOOTSTRAP_SERVERS,
        value_serializer=lambda v: json.dumps(v).encode("utf-8"),
    )

def detect_alerts(record):
    alerts = []
    try:
        # Extract & clean values
        temperature = int(str(record.get("temperature", "0")).split()[0])
        humidity = int(str(record.get("humidity", "0")).replace("%", ""))
        wind_speed = int(str(record.get("wind_speed", "0")).split()[0])
        precipitation = int(str(record.get("precipitation", "0")).split()[0])

        # Rules
        if wind_speed > 70:
            alerts.append("🌪️ High Wind Alert")
        if precipitation > 30:
            alerts.append("🌊 Flood Warning")
        if wind_speed > 50 and precipitation > 20:
            alerts.append("⛈️ Storm Warning")
        if temperature < -20 or temperature > 40:
            alerts.append("🔥 Extreme Temperature")

    except Exception as e:
        print("⚠️ Error parsing record:", e)

    return alerts

if __name__ == "__main__":
    consumer = create_consumer()
    producer = create_producer()

    print(f"📡 Listening for weather readings on {READINGS_TOPIC}...")
    for message in consumer:
        record = message.value
        alerts = detect_alerts(record)

        for alert in alerts:
            alert_msg = {
                "station_id": record.get("station_id"),
                "location": record.get("location"),
                "alert": alert,
                "reading": record,
            }
            producer.send(ALERTS_TOPIC, alert_msg)
            print("🚨 ALERT Published:", alert_msg)

    producer.flush()
vi sumer 
"""
Alert Consumer - Milestone 2
Consumes alerts from Kafka topic: weather.alerts and prints them
"""

import json
from kafka import KafkaConsumer

ALERTS_TOPIC = "weather.alerts"
BOOTSTRAP_SERVERS = ["localhost:9092"]

def create_consumer():
    return KafkaConsumer(
        ALERTS_TOPIC,
        bootstrap_servers=BOOTSTRAP_SERVERS,
        auto_offset_reset="earliest",
        enable_auto_commit=True,
        group_id="alert-consumer-group",
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
    )

if __name__ == "__main__":
    consumer = create_consumer()

    print(f"🚨 Listening for emergency alerts on {ALERTS_TOPIC}...")
    for message in consumer:
        alert = message.value
        print(f"\n🚨 EMERGENCY ALERT 🚨")
        print(f"📍 Station: {alert['station_id']} ({alert['location']})")
        print(f"⚠️  Type: {alert['alert']}")
        print(f"🌤️  Reading: {alert['reading']}")
        print("-" * 50)
